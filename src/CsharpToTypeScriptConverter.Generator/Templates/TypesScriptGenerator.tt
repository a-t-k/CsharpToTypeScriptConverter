<#@ template language="C#" visibility="public" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= Environment.Version #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

"use strict";
// defined interface for all request commands
export interface <#=@Settings.RequestCommandInterfaceName#><T>{ _?: T}

// all request commands as classes

<# foreach(var @class in this.Classes) { #>

/**
<#if(@class.Documentation != null){#>
<#foreach(var @documentation in @class.Documentation){#>
 * <#=@documentation#>
<#}#><#}#>
 * @returns {<#= @class.ReturnTypeName #>}
*/
export class <#= @class.Name #> implements <#=@Settings.RequestCommandInterfaceName#><<#= @class.ReturnTypeName #>> {
    private readonly $type? = "<#= @class.TypeNameForJsonDeserialization#>";
    public _?: <#= @class.ReturnTypeName #>;
<#    foreach(var member in @class.Members) { #>
    public <#= char.ToLower(member.Name[0]) + member.Name.Substring(1)#>?<#= member.IsDeclaredAsGeneric? ":": ":" #> <#= member.IsDeclaredAsGeneric? member.GenericName : GetTypeScriptFieldTypeName(member.Type, null, false, false) #>;
<#    } #>
}
<# } #>


// Enums

<# foreach(var @enum in this.Enums) { #>
<# if(@enum.Documentation != null) {#>
/**
 <# foreach(var @documentation in @enum.Documentation) {#>
 * <#= @documentation #><#}#>
*/<#}#>
export enum <#= @enum.Name #> {
<#foreach(var member in @enum.Members){#>
<# if(Enum.GetUnderlyingType(member.Type) == typeof(int)){ #>
    <#=member.Name.Trim() #> = <#=(int)Enum.Parse(member.Type, member.Name)#>,
<# } #>
<# if(Enum.GetUnderlyingType(member.Type) == typeof(byte)){ #>
    <#=member.Name.Trim() #> = <#=(byte)Enum.Parse(member.Type, member.Name)#>,
<# } #>
<#} #>
}
<# } #>

// Used types

<# foreach(var @returnType in this.ReturnTypes) { #>
<# if(@returnType.Documentation != null) {#>
/**
<# foreach(var @documentation in @returnType.Documentation) {#>
 * <#= @documentation #>
<# } #>
*/<#}#>
export interface <#= @returnType.Name #> <# if(@returnType.ImplementsInterfaceTypeNames.Any()){ #>extends <#= string.Join(",", @returnType.ImplementsInterfaceTypeNames[0])#><# }
#>{
<#  foreach(var member in @returnType.Members) { #>
	    <#= char.ToLower(member.Name[0]) + member.Name.Substring(1)#><#= member.IsDeclaredAsGeneric? ":": ":" #> <#= member.IsDeclaredAsGeneric? member.GenericName : GetTypeScriptFieldTypeName(member.Type, null, false, false) #>;
<#    } #>
}
<# } #>
